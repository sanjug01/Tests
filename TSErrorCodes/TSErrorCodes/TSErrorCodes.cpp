// TSErrorCodes.cpp : Defines the entry point for the console application.
//
#include <cstdlib>
#include <cerrno>
#include <iostream>
#include <string>
#include <fstream>

#include <algorithm>
#include <functional>
#include <map>
#include <regex>

#include "stdafx.h"

#define ENABLE_RAIL
#define TSC_PROXY

#include "tserrs.h"
#include "discreasons.h"


#define UINT unsigned int

void InitMainReasons(std::map<short, std::string>& result)
{
#define _INIT_CODE(code) result[code] = #code;
	_INIT_CODE(TSC_DISCONNECT_CODE_CLASS_CORE)
	_INIT_CODE(TSC_DISCONNECT_CODE_CLASS_CUSTOM)
	_INIT_CODE(TSC_DISCONNECT_CODE_CLASS_RAIL)
	_INIT_CODE(TSC_DISCONNECT_CODE_CLASS_PROXY)
	_INIT_CODE(NL_DISCONNECT_ERROR)
	_INIT_CODE(SL_DISCONNECT_ERROR)
	_INIT_CODE(SSL_DISCONNECT_ERROR)
	_INIT_CODE(UI_DISCONNECT_ERROR)
	_INIT_CODE(NEG_DISCONNECT_ERROR)
	_INIT_CODE(SC_DISCONNECT_ERROR)
#undef _INIT_CODE
}

void InitNLReasons(std::map<short, std::map<short, std::string> >& result)
{
#define _INIT_CODE(code) result[NL_DISCONNECT_ERROR][code] = #code;
	_INIT_CODE(NL_ERR_TDDNSLOOKUPFAILED)
	_INIT_CODE(NL_ERR_TDSKTCONNECTFAILED)
	_INIT_CODE(NL_ERR_TDONCALLTOSEND)
	_INIT_CODE(NL_ERR_TDONCALLTORECV)
	_INIT_CODE(NL_ERR_TDGHBNFAILED)
	_INIT_CODE(NL_ERR_TDTIMEOUT)
	_INIT_CODE(NL_ERR_TDBADIPADDRESS)
	_INIT_CODE(NL_ERR_TDFDCLOSE)
	_INIT_CODE(NL_ERR_TDANSICONVERT)
	_INIT_CODE(NL_ERR_TDLOCALINITCONNECT)
	_INIT_CODE(NL_ERR_XTBADTPKTVERSION)
	_INIT_CODE(NL_ERR_XTBADHEADER)
	_INIT_CODE(NL_ERR_XTUNEXPECTEDDATA)
	_INIT_CODE(NL_ERR_MCSUNEXPECTEDPDU)
	_INIT_CODE(NL_ERR_MCSNOTCRPDU)
	_INIT_CODE(NL_ERR_MCSBADCRLENGTH)
	_INIT_CODE(NL_ERR_MCSBADCRFIELDS)
	_INIT_CODE(NL_ERR_MCSBADMCSREASON)
	_INIT_CODE(NL_ERR_MCSNOUSERIDINAUC)
	_INIT_CODE(NL_ERR_MCSNOCHANNELIDINCJC)
	_INIT_CODE(NL_ERR_MCSINVALIDPACKETFORMAT)
	_INIT_CODE(NL_ERR_MCSSENDCIFAILED)
	_INIT_CODE(NL_ERR_NCBADMCSRESULT)
	_INIT_CODE(NL_ERR_NCNOUSERDATA)
	_INIT_CODE(NL_ERR_NCINVALIDH221KEY)
	_INIT_CODE(NL_ERR_NCNONETDATA)
	_INIT_CODE(NL_ERR_NCATTACHUSERFAILED)
	_INIT_CODE(NL_ERR_NCCHANNELJOINFAILED)
	_INIT_CODE(NL_ERR_NCJOINBADCHANNEL)
	_INIT_CODE(NL_ERR_NCNOCOREDATA)
	_INIT_CODE(NL_ERR_NCVERSIONMISMATCH)
#undef _INIT_CODE
}

void InitSLReasons(std::map<short, std::map<short, std::string> >& result)
{
#define _INIT_CODE(code) result[SL_DISCONNECT_ERROR][code] = #code;
	_INIT_CODE(SL_ERR_NOMEMFORSENDUD)
	_INIT_CODE(SL_ERR_NOMEMFORRECVUD)
	_INIT_CODE(SL_ERR_NOMEMFORSECPACKET)
	_INIT_CODE(SL_ERR_NOSECURITYUSERDATA)
	_INIT_CODE(SL_ERR_INVALIDENCMETHOD)
	_INIT_CODE(SL_ERR_INVALIDSRVRAND)
	_INIT_CODE(SL_ERR_INVALIDSRVCERT)
	_INIT_CODE(SL_ERR_GENSRVRANDFAILED)
	_INIT_CODE(SL_ERR_MKSESSKEYFAILED)
	_INIT_CODE(SL_ERR_ENCCLNTRANDFAILED)
	_INIT_CODE(SL_ERR_ENCRYPTFAILED)
	_INIT_CODE(SL_ERR_DECRYPTFAILED)
	_INIT_CODE(SL_ERR_INVALIDPACKETFORMAT)
	_INIT_CODE(SL_ERR_INITFIPSFAILED)
	_INIT_CODE(SL_ERR_LICENSINGTIMEOUT)
	_INIT_CODE(SL_ERR_NOTIMER)
#undef _INIT_CODE
}

void InitSSLReasons(std::map<short, std::map<short, std::string> >& result)
{
#define _INIT_CODE(code) result[SSL_DISCONNECT_ERROR][code] = #code;
	_INIT_CODE(SSL_ERR_CERT_VALIDATION_FAILED)
	_INIT_CODE(SSL_ERR_HANDSHAKE_FAILED)
	_INIT_CODE(SSL_ERR_ENCRYPTION_FAILED)
	_INIT_CODE(SSL_ERR_DECRYPTION_FAILED)
	_INIT_CODE(SSL_ERR_INITIALIZATION_FAILED)
	_INIT_CODE(SSL_ERR_INVALID_STATE)
	_INIT_CODE(SSL_ERR_RCVBUFFER_RESIZE_FAILED)
	_INIT_CODE(SSL_ERR_LOGON_FAILURE)
	_INIT_CODE(SSL_ERR_CERT_MISMATCH)
	_INIT_CODE(SSL_ERR_NO_SUCH_USER)
	_INIT_CODE(SSL_ERR_ACCOUNT_DISABLED)
	_INIT_CODE(SSL_ERR_ACCOUNT_RESTRICTION)
	_INIT_CODE(SSL_ERR_ACCOUNT_LOCKED_OUT)
	_INIT_CODE(SSL_ERR_ACCOUNT_EXPIRED)
	_INIT_CODE(SSL_ERR_PASSWORD_EXPIRED)
	_INIT_CODE(SSL_ERR_INVALID_LOGON_HOURS)
	_INIT_CODE(SSL_ERR_INVALID_WORKSTATION)
	_INIT_CODE(SSL_ERR_PASSWORD_MUST_CHANGE)
	_INIT_CODE(SSL_ERR_LOGON_TYPE_NOT_GRANTED)
	_INIT_CODE(SSL_ERR_USER2USER_REQUIRED)
	_INIT_CODE(SSL_ERR_WRONG_PRINCIPAL)
	_INIT_CODE(SSL_ERR_DELEGATION_POLICY)
	_INIT_CODE(SSL_ERR_POLICY_NTLM_ONLY)
	_INIT_CODE(SSL_ERR_NO_AUTHENTICATING_AUTHORITY)
	_INIT_CODE(SSL_ERR_NO_SC_AUTHENTICATING_AUTHORITY)
	_INIT_CODE(SSL_ERR_NO_PASSWD_AUTHENTICATING_AUTHORITY)
	_INIT_CODE(SSL_ERR_CERT_EXPIRED)
	_INIT_CODE(SSL_ERR_SMARTCARD_WRONG_PIN)
	_INIT_CODE(SSL_ERR_TIME_SKEW)
	_INIT_CODE(SSL_ERR_DOWNGRADE_DETECTED)
	_INIT_CODE(SSL_ERR_NO_CREDENTIAL)
	_INIT_CODE(SSL_ERR_NO_CREDENTIAL_RECONNECT)
	_INIT_CODE(SSL_ERR_FRESH_CRED_REQUIRED_BY_SERVER)
	_INIT_CODE(SSL_ERR_SMARTCARD_BLOCKED)
	_INIT_CODE(SSL_ERR_NO_AUTH_AUTHORITY_NLA_REQUIRED)
	_INIT_CODE(SSL_ERR_ACCESS_DENIED)
	_INIT_CODE(SSL_ERR_LOGON_FAILURE_RELAUNCH_APP)
#undef _INIT_CODE
}

void InitUIReasons(std::map<short, std::map<short, std::string> >& result)
{
#define _INIT_CODE(code) result[UI_DISCONNECT_ERROR][code] = #code;
	_INIT_CODE(UI_ERR_DISCONNECT_TIMEOUT)
	_INIT_CODE(UI_ERR_GHBNFAILED)
	_INIT_CODE(UI_ERR_BADIPADDRESS)
	_INIT_CODE(UI_ERR_ANSICONVERT)
	_INIT_CODE(UI_ERR_DNSLOOKUPFAILED)
	_INIT_CODE(UI_ERR_NOTIMER)
	_INIT_CODE(UI_ERR_LOOPBACK_CONSOLE_CONNECT)
	_INIT_CODE(UI_ERR_LICENSING_NEGOTIATION_FAIL)
	_INIT_CODE(UI_ERR_LICENSING_TIMEOUT)
	_INIT_CODE(UI_ERR_UNEXPECTED_DISCONNECT)
	_INIT_CODE(UI_ERR_NORMAL_DISCONNECT)
	_INIT_CODE(UI_ERR_DECOMPRESSION_FAILURE)
	_INIT_CODE(UI_ERR_OUT_OF_MEMORY_FOR_CRITICAL_OP)
	_INIT_CODE(UI_ERR_ARC_FAILED)
	_INIT_CODE(UI_ERR_POLICY_PROHIBITS_CONNECTION)
	_INIT_CODE(UI_ERR_LOW_VIDEO_MEMORY)
	_INIT_CODE(UI_ERR_INTERNAL_TRIGGER_RECONNECT)
#undef _INIT_CODE
}

void InitNEGReasons(std::map<short, std::map<short, std::string> >& result)
{
#define _INIT_CODE(code) result[NEG_DISCONNECT_ERROR][code] = #code;
	_INIT_CODE(NEG_ERR_BADNEGHEADER)
	_INIT_CODE(NEG_ERR_SSLREQUIRED)
	_INIT_CODE(NEG_ERR_NOSERVERSSLSUPPORT)
	_INIT_CODE(NEG_ERR_NEGFLAGSMISMATCH)
	_INIT_CODE(NEG_ERR_SSLCERTNOTONSERVER)
	_INIT_CODE(NEG_ERR_NEGFLAGNOTPRESENT)
	_INIT_CODE(NEG_ERR_UNKNOWNFAILURECODE)
	_INIT_CODE(NEG_ERR_INCONSISTENTFLAGS)
	_INIT_CODE(NEG_ERR_HYBRIDREQUIRED)
	_INIT_CODE(NEG_ERR_SSLWITHUSERAUTHREQUIRED)
	_INIT_CODE(NEG_ERR_INCOMPATIBLESERVER)
	_INIT_CODE(NEG_ERR_RESTRICTEDLOGONNOTSUPPORTED)
#undef _INIT_CODE
}

void InitSCReasons(std::map<short, std::map<short, std::string> >& result)
{
#define _INIT_CODE(code) result[SC_DISCONNECT_ERROR][code] = #code;
	_INIT_CODE(SC_ERR_NO_SERVICE)
	_INIT_CODE(SC_ERR_NO_READERS_AVAILABLE)
	_INIT_CODE(SC_ERR_NO_SMARTCARD)
	_INIT_CODE(SC_ERR_GENERIC_SMARTCARD_ERROR)
	_INIT_CODE(SC_ERR_CANCEL_SMARTCARD_DIALOG)
#undef _INIT_CODE
}

void InitRAILReasons(std::map<short, std::map<short, std::string> >& result)
{
#define _INIT_CODE(code) result[TSC_DISCONNECT_CODE_CLASS_RAIL][code] = #code;
	_INIT_CODE(RAIL_ERR_ARC_FAILED)
	_INIT_CODE(RAIL_ERR_INVALID_RAIL_CAPS)
#undef _INIT_CODE
}

void InitPROXYReasons(std::map<short, std::map<short, std::string> >& result)
{
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x1] = "PROXY_ERR_LOGONFAILED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x2] = "PROXY_ERR_CERTREVFAILED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x3] = "PROXY_ERR_INVALIDCERT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x4] = "PROXY_ERR_CERTREVOKED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x5] = "PROXY_ERR_INVALIDCA";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x6] = "PROXY_ERR_CERTCNINVALID";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x7] = "PROXY_ERR_CERTDATEINVALID";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x8] = "PROXY_ERR_TRANSPORTFAILURE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x9] = "PROXY_ERR_FAILEDSENDDATA";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0xA] = "PROXY_ERR_FAILEDREADDATA";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0xB] = "PROXY_ERR_AUTHSUPPORT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0xC] = "PROXY_ERR_BADURI";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0xD] = "PROXY_ERR_UNAVAILABLE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0xE] = "PROXY_ERR_DLLLOADFAILED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0xF] = "PROXY_ERR_LOWRESOURCES";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x10] = "PROXY_ERR_RPCNOSUPPORT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x11] = "PROXY_ERR_NOSCARDSERVICE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x12] = "PROXY_ERR_REMOVEDCARD";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x13] = "PROXY_ERR_NOSMARTCARD";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x14] = "PROXY_ERR_ERRORSMARTCARD";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x15] = "PROXY_ERR_INVALIDAUTHID"; 
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x16] = "PROXY_ERR_TSHOSTNOTFOUND";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x17] = "PROXY_ERR_SECURITYPACKAGE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x18] = "PROXY_ERR_GRACEFULDISCONNECT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x19] = "PROXY_ERR_CONNECTIONABORTED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x1A] = "PROXY_ERR_NEEDCREDENTIALS";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x1B] = "PROXY_ERR_RAP_ACCESSDENIED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x1C] = "PROXY_ERR_NAP_ACCESSDENIED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x1D] = "PROXY_ERR_USERCANCELED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x1E] = "PROXY_ERR_DISCONNECTBYCORE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x1F] = "PROXY_ERR_NOTALLOWEDBYGP";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x20] = "PROXY_ERR_OUTGOINGPROXYAUTH";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x21] = "PROXY_ERR_PASSWORDEXPIRED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x22] = "PROXY_ERR_MAXCONNECTIONSREACHED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x23] = "PROXY_ERR_NOTSUPPORTED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x24] = "PROXY_ERR_CAPABILITYMISMATCH";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x25] = "PROXY_ERR_INCOMPATIBLE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x26] = "PROXY_ERR_INVALIDSCPIN"; 
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x27] = "PROXY_ERR_QUARANTINE_ACCESSDENIED"; 
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x28] = "PROXY_ERR_NOCERTAVAILABLE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x29] = "PROXY_ERR_UNTRUSTEDSERVER";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x2A] = "PROXY_ERR_INVALIDSERVERCERT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x2B] = "PROXY_ERR_INCORRECTCREDTYPEPWD";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x2C] = "PROXY_ERR_INCORRECTCREDTYPESC";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x2D] = "PROXY_ERR_NOSCARDREADER";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x2E] = "PROXY_ERR_NETWORKDOWN";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x2F] = "PROXY_ERR_NOPREAUTHCOOKIE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x30] = "PROXY_ERR_INVALIDPREAUTHCOOKIE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x31] = "PROXY_ERR_BLOCKED_SMARTCARD";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0X32] = "PROXY_ERR_IDLETIMEOUT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0X33] = "PROXY_ERR_SESSIONTIMEOUT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x34] = "PROXY_ERR_COOKIE_BADPACKET";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x35] = "PROXY_ERR_COOKIE_AUTH_ACCESSDENIED";  
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x36] = "PROXY_ERR_CONSENT_DECLINED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x37] = "PROXY_ERR_UNSUPPORTED_AUTHENTICATION_METHOD";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x38] = "PROXY_ERR_REAUTH_AUTHN_FAILED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x39] = "PROXY_ERR_REAUTH_CAP_FAILED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x3A] = "PROXY_ERR_REAUTH_RAP_FAILED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x3B] = "PROXY_ERR_SDR_NOT_SUPPORTED_BY_TS";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0X3C] = "PROXY_ERR_SCCERTNOTFOUND";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x3D] = "PROXY_ERR_COOKIE_NOT_PRESENT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x3E] = "PROXY_ERR_COOKIE_NOT_PRESENT_INSECURE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x3F] = "PROXY_ERR_COOKIE_EXPIRED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x40] = "PROXY_ERR_COOKIE_EXPIRED_INSECURE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x41] = "PROXY_ERR_REAUTH_NAP_FAILED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x42] = "PROXY_ERR_COOKIE_LENGTH_EXCEEDED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x43] = "PROXY_ERR_SECURITY_CHANNEL_ERROR";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x44] = "PROXY_ERR_FORWARD_PROXY_ERROR";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x45] = "PROXY_ERR_RESOURCE_ACCESS_DENIED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x46] = "PROXY_ERR_RESOURCE_NOT_AVALIABLE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x47] = "PROXY_ERR_RESOURCE_UNKOWN_FAILURE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x48] = "PROXY_ERR_SIDETRANSPORT_DISCONNECTED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x49] = "PROXY_ERR_UNSUPPORTED_CLIENT";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x4A] = "PROXY_ERR_DUALCHANNEL_WEBPROXY_ISSUE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x4B] = "PROXY_ERR_RESOURCE_CREATION_PENDING";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x4C] = "PROXY_ERR_UNEXPECTED_USERNAME";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x4D] = "PROXY_ERR_DEMO_RESOURCE_NOT_AVAILABLE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x4E] = "PROXY_ERR_RESOURCE_CAPACITY_REACHED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x4F] = "PROXY_ERR_ACCOUNT_TRIAL_EXPIRED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x50] = "PROXY_ERR_ACCOUNT_DISABLED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x51] = "PROXY_ERR_PASSWORDMUSTCHANGE";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x52] = "PROXY_ERR_PASSWORDISREQUIRED";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x53] = "PROXY_ERR_NOSUCHCREDENTIAL";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x54] = "PROXY_ERR_FILENOTFOUND";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x55] = "PROXY_ERR_RPCBADSTUBDATA";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x56] = "PROXY_ERR_WRONGSTUBVERSION";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x57] = "PROXY_ERR_INVALIDMEMBERNAME";
	result[TSC_DISCONNECT_CODE_CLASS_PROXY][0x58] = "PROXY_ERR_PROCNOTFOUND";
}

class ErrorMapper
{
public:
	typedef std::function<void(const UINT, const std::string& main, const std::string& aux)> ConversionCallback;

private:
	typedef std::map<short, std::string> ReasonMap;
	typedef std::map<short, ReasonMap> AuxReasonMap;

	mutable ReasonMap m_mainReasons;
	mutable AuxReasonMap m_auxReasons;

public:
	ErrorMapper() 
	{ 
		InitMainReasons(m_mainReasons);
		InitNLReasons(m_auxReasons);
		InitSLReasons(m_auxReasons);
		InitSSLReasons(m_auxReasons);
		InitUIReasons(m_auxReasons);
		InitNEGReasons(m_auxReasons);
		InitSCReasons(m_auxReasons);
		InitRAILReasons(m_auxReasons);
		InitPROXYReasons(m_auxReasons);
	}

	const std::string& GetMainDesc(short error) const 
	{
		return m_mainReasons[TSC_GET_MAIN_DISCONNECT_CODE(error)];
	}

	const std::string& GetAuxDesc(short error) const 
	{
		return m_auxReasons[TSC_GET_MAIN_DISCONNECT_CODE(error)][TSC_GET_AUX_DISCONNECT_CODE(error)];
	}

	void CollectErrorMessages(ConversionCallback callback) const
	{
		for (const ReasonMap::value_type& main : m_mainReasons)
		{
			for(const ReasonMap::value_type& aux : m_auxReasons[main.first])
			{
				if (callback)
				{
					callback(TSC_MAKE_CORE_DISCONNECT_ERR(main.first, aux.first), main.second, aux.second);
				}
			}
		}
	}
};

void PrintSQLTable(std::ostream& output, ErrorMapper& errorMapper)
{
	output << "CREATE TABLE disc_codes (code int, reason text);" << std::endl;
	errorMapper.CollectErrorMessages(
		[&](const UINT code, const std::string& main, const std::string& aux) 
	{
		output << "INSERT INTO disc_codes (code, reason) VALUES('" << std::hex << code << "', 'Main: " << main << ", Aux: " << aux << "');" << std::endl;
	});
}

void PrintCSVTable(std::ostream& output, ErrorMapper& errorMapper)
{
	errorMapper.CollectErrorMessages(
		[&](const UINT code, const std::string& main, const std::string& aux)
	{
		output << std::hex << code << ", " << main << ", " << aux << std::endl;
	});
}

char* getCmdOption(char ** begin, char ** end, const std::string & option)
{
	char ** itr = std::find(begin, end, option);
	if (itr != end && ++itr != end)
	{
		return *itr;
	}
	return NULL;
}

bool cmdOptionExists(char** begin, char** end, const std::string& option)
{
	return std::find(begin, end, option) != end;
}

void PrintUsage(std::ostream& output, std::string cmd)
{
	output << "usage: " << std::endl;
	output << "\t" << cmd << " --sql" << std::endl;
	output << "\t" << cmd << " --csv" << std::endl;
	output << "\t" << cmd << " 0xCode" << std::endl;
	output << "\t" << cmd << " --output <fname>" << std::endl;
}

int main(int argc, char * argv[])
{
	ErrorMapper errorMapper;
	std::ostream& soutput = std::cout;
	std::fstream foutput;
	char* fname = getCmdOption(argv, argv + argc, "--output");

	if (argc > 1 && fname != NULL)
	{
		foutput.open(fname, std::fstream::out);
	}

	if (argc < 2 || cmdOptionExists(argv, argv + argc, "--help"))
	{
		PrintUsage(std::cout, argv[0]);
	}
	else if (cmdOptionExists(argv, argv + argc, "--sql"))
	{
		PrintSQLTable(fname ? foutput : std::cout, errorMapper);
	}
	else if (cmdOptionExists(argv, argv + argc, "--csv"))
	{
		PrintCSVTable(fname ? foutput : std::cout, errorMapper);
	}
	else
	{
		short error = static_cast<short>(std::strtol(argv[1], 0, 16));

		if (error == 0)
		{
			PrintUsage(std::cout, argv[0]);
		}
		else
		{
			std::cout << "Description for error code: 0x" << std::hex << error << " Main: " << errorMapper.GetMainDesc(error) << " Aux: " << errorMapper.GetAuxDesc(error) << std::endl;
		}
	}

	if (fname != NULL)
	{
		foutput.close();
	}

    return 0;
}

